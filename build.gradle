plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.soongsil'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	//test DB용도
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	// 시큐리티 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	// 유효성검사
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// swagger 문서화
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	// 이미지 S3 업로드
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	// quartz 스케쥴러 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	// 파이어베이스 푸시알림 라이브러리
	implementation 'com.google.firebase:firebase-admin:9.0.0'
	// 통신 라이브러리
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'

	// 모니터링
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// 타임리프
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	testImplementation 'org.mockito:mockito-inline:4.7.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.8'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	dependsOn(test)
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled false
		csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
	}
	finalizedBy(jacocoTestCoverageVerification)
}

jacocoTestCoverageVerification {
	// 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
	violationRules {
		rule {
			enabled = true
			element = "CLASS"

			limit {
				counter = "BRANCH"
				value = "COVEREDRATIO"
				minimum = "0.00".toBigDecimal()
			}

			limit {
				counter = "LINE"
				value = "TOTALCOUNT"
				maximum = "200".toBigDecimal()
			}
		}
	}

//	var excludes = mutableListOf<String>()
//	excludes.add("com/yolo/jean/config")
//	excludes.add("com/yolo/jean/global")
//	excludes.add("com/yolo/jean/reply/service/ReplyService.class")
//	excludes.add("com/yolo/jean/board/service/BoardSearchService.class")
//
//	classDirectories.setFrom(
//			sourceSets.main.get().output.asFileTreematching {
//				exclude(excludes)
//			}
//	)
}

test {
	useJUnitPlatform()
	finalizedBy(jacocoTestReport)
}